const { countBullsAndCows, hasUniqueDigits, sieveOfAtkin, generateSecretNumber,checkGuess} = require('./qw');
test('hasUniqueDigits возвращает true или false для цифр', () => {
    expect(hasUniqueDigits(1234)).toBe(true);
    expect(hasUniqueDigits(5678)).toBe(true);
    expect(hasUniqueDigits(5567)).toBe(false);
    expect(hasUniqueDigits(9987)).toBe(false);
});

// Импортируем необходимые функции из другого файла
jest.mock('./qw', () => ({
    ...jest.requireActual('./qw'), // Keep all other exports as they are
    sieveOfAtkin: jest.fn(), // Mock sieveOfAtkin function
}));


describe('checkGuess', () => {
    it('should return feedback for the guess', () => {
        const secretNumber = "1234";
        const attempts = [];

        let guess = "1234";
        let result = checkGuess(guess, secretNumber, attempts);
        expect(result).toBe("Поздравляем! Вы угадали число!");

        guess = "12345";
        result = checkGuess(guess, secretNumber, attempts);
        expect(result).toBe("Число введено неверно. Введите 4-значное число.");

        guess = "5678";
        result = checkGuess(guess, secretNumber, attempts);
        expect(result).toBe("Быков: 0, Коров: 0");
    });
});


describe('countBullsAndCows', () => {
    it('should count bulls and cows correctly', () => {
        const secretNumber = "1234";

        let guess = "1234";
        let result = countBullsAndCows(guess, secretNumber);
        expect(result).toEqual({ bulls: 4, cows: 0 });

        guess = "4321";
        result = countBullsAndCows(guess, secretNumber);
        expect(result).toEqual({ bulls: 0, cows: 4 });

        guess = "1243";
        result = countBullsAndCows(guess, secretNumber);
        expect(result).toEqual({ bulls: 2, cows: 2 });

        guess = "5678";
        result = countBullsAndCows(guess, secretNumber);
        expect(result).toEqual({ bulls: 0, cows: 0 });

        guess = "1985";
        result = countBullsAndCows(guess, secretNumber);
        expect(result).toEqual({ bulls: 1, cows: 0 });
    });
});
describe('generateSecretNumber', () => {
    it('should generate a secret number', () => {
        const mockPrimes = [1039, 1049, 1063, 1069, 1087, 1093, 1097, 1237, 1249, 1259, 1279, 1283, 1289, 1297,  1307, 1319, 1327, 1367, 1373,  1409, 1423, 1427, 1429, 1439, 1453, 1459,  1483, 1487, 1489, 1493, 1523,  1543, 1549, 1567, 1579, 1583, 1597,  1607, 1609, 1627, 1637, 1657, 1693, 1697, 1709, 1723, 1753, 1759, 1783, 1789, 1823, 1847, 1867, 1873, 1879, 1907, 1973, 1987, 2017, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2137, 2143, 2153, 2179, 2309, 2341, 2347, 2351, 2357, 2371, 2381, 2389, 2417, 2437, 2459, 2467, 2473, 2503, 2531, 2539, 2543, 2549, 2579, 2591, 2593, 2609, 2617, 2621, 2647, 2657, 2659, 2671, 2683, 2687, 2689, 2693, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2789, 2791, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3121, 3137, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3251, 3253, 3257, 3259, 3271, 3407, 3457, 3461, 3463, 3467, 3469, 3491, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3659, 3671, 3673, 3691, 3697, 3701, 3709, 3719, 3739, 3761, 3769, 3793, 3803, 3821, 3847, 3851, 3907, 3917, 3931, 3947, 3967, 4013, 4019, 4021, 4027, 4051, 4057, 4073, 4079, 4091, 4093, 4127, 4129, 4139, 4153, 4157, 4159, 4201, 4217, 4219, 4231, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4357, 4391, 4397, 4507, 4513, 4517, 4519, 4523, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4651, 4657, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4751, 4759, 4783, 4789, 4793, 4801, 4813, 4817, 4831, 4861, 4871, 4903, 4931, 4937, 4943, 4951, 4957, 4967, 4973, 4987, 5021, 5023, 5039, 5081, 5087, 5107, 5147, 5167, 5179, 5189, 5197, 5209, 5231, 5237, 5261, 5273, 5279, 5281, 5297, 5309, 5347, 5381, 5387, 5407, 5413, 5417, 5419, 5431, 5437, 5471, 5479, 5483, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5741, 5743, 5749, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5897, 5903, 5923, 5927, 5981, 5987, 6029, 6037, 6043, 6047, 6053, 6073, 6079, 6089, 6091, 6143, 6173, 6197, 6203, 6217, 6247, 6257, 6271, 6287, 6301, 6317, 6329, 6359, 6379, 6389, 6397, 6421, 6427, 6451, 6473, 6481, 6491, 6521, 6529, 6547, 6571, 6581, 6701, 6703, 6709, 6719, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6841, 6857, 6871, 6907, 6917, 6947, 6971, 6983, 7013, 7019, 7039, 7043, 7057, 7069, 7103, 7109, 7129, 7159, 7193, 7213, 7219, 7243, 7247, 7253, 7283, 7309, 7321, 7349, 7351, 7369, 7417, 7451, 7459, 7481, 7489, 7523, 7529, 7541, 7549, 7561, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7681, 7691, 7823, 7829, 7841, 7853, 7901, 7907, 7951, 7963, 8017, 8039, 8053, 8059, 8069, 8093, 8123, 8147, 8167, 8179, 8209, 8219, 8231, 8237, 8243, 8263, 8269, 8273, 8291, 8293, 8297, 8317, 8329, 8369, 8419, 8423, 8429, 8431, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8609, 8623, 8627, 8629, 8641, 8647, 8693, 8713, 8719, 8731, 8741, 8753, 8761, 8783, 8923, 8941, 8951, 8963, 8971, 9013, 9029, 9041, 9043, 9067, 9103, 9127, 9137, 9157, 9173, 9187, 9203, 9241, 9257, 9281, 9283, 9341, 9371, 9403, 9413, 9419, 9421, 9431, 9437, 9461, 9463, 9467, 9473, 9521, 9547, 9587, 9601, 9613, 9623, 9631, 9643, 9679, 9689, 9697, 9719, 9721, 9743, 9749, 9781, 9803, 9817, 9851, 9857, 9859, 9871.];
        sieveOfAtkin.mockReturnValue(mockPrimes);

        console.log("Mock Primes:", mockPrimes);

        const secretNumber = generateSecretNumber();

        console.log("Secret Number:", secretNumber);

        expect(typeof secretNumber).toBe('string');
        expect(secretNumber.length).toBe(4);
        expect(mockPrimes.includes(parseInt(secretNumber))).toBe(true);
    });
});
